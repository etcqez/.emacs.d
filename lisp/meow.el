;; 切换最近buffer
(defun switch-to-last-buffer ()
  (interactive)
  (switch-to-buffer nil))
;(define-key evil-normal-state-map (kbd "SPC TAB") 'switch-to-last-buffer)

(use-package surround
  :config)

(defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   ;; '("1" . meow-digit-argument)
   ;; '("2" . meow-digit-argument)
   ;; '("3" . meow-digit-argument)
   ;; '("4" . meow-digit-argument)
   ;; '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   ;; '("0" . meow-digit-argument)
   '("0" . delete-window)
   '("1" . delete-other-windows)
   '("2" . split-window-below)
   '("3" . split-window-right)
   '("4" . switch-to-buffer-other-frame)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet)
   
   '("b" . consult-buffer)
   '("s" . avy-goto-char-timer)
   '("w" . ace-window)
   '("r" . revert-buffer)
   '("S" . surround-insert)
   '("C" . surround-change)
   '("k" . surround-kill)
   '("K" . surround-kill-outer)
   '("TAB" . switch-to-last-buffer))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("s" . meow-delete)
   '("S" . meow-backward-delete)
   '("w" . meow-next-word)
   '("W" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("d" . meow-kill)
   '("D" . meow-kill-whole-line)
   '("T" . meow-swap-grab)
   '("t" . meow-till)
   '("u" . undo)
   '("U" . undo-redo)
   ;; '("U" . meow-undo-in-selection)
   '("v" . set-mark-command)
   '("e" . meow-mark-word)
   '("E" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)
   '("r" . replace-string)
   '("R" . meow-replace)
   ;; '("r" . ((lambda ()
   ;; (interactive)
   ;; (delete-char 1)  ;; 删除当前字符
   ;; (insert (read-char "Replace with: ")) ;; 提示用户输入字符并插入
   ;; )))
   '("/" . isearch-forward)
   '("n" . isearch-repeat-forward)
   '("N" . isearch-repeat-backward)
   '("*" . isearch-forward-symbol-at-point)
   '("=" . indent-region)
   ))

(use-package meow
  :init
  (meow-global-mode 1)
  :config
  (meow-setup)
  (meow-setup-line-number)
  (setq meow-use-cursor-position-hack t
	meow-use-enhanced-selection-effect t)  ;; optional, for visual effect
    (setopt meow-use-clipboard t
          meow-expand-hint-counts nil)
  )
